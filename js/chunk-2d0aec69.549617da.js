(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0aec69"],{"0c00":function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return O}));r("e06a");var s=r("b2b2"),o=r("84e3"),a=r("3e27"),i=r("1451"),c=r("9dee"),n=r("b4e0"),l=r("9b2b"),f=r("19db"),m=r("8c6a"),b=r("7220"),u=r("2616"),d=r("3af1");class O{convertVectorFieldData(e){const t=a["a"].fromJSON(e.pixelBlock),r=Object(f["b"])(t,e.type);return Promise.resolve(Object(s["k"])(r)&&r.toJSON())}async decode(e){const t=await Object(i["a"])(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=a["a"].fromJSON(e.pixelBlock),e.extent=e.extent?d["a"].fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(Object(s["k"])(t)&&t.toJSON())}async updateSymbolizer(e){var t;this.symbolizer=b["a"].fromJSON(e.symbolizerJSON),e.histograms&&"rasterStretch"===(null==(t=this.symbolizer)?void 0:t.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const t=this.symbolizer.simpleStretch(a["a"].fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(Object(s["k"])(t)&&t.toJSON())}estimateStatisticsHistograms(e){const t=Object(l["e"])(a["a"].fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=Object(c["l"])(a["a"].fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return t&&t.forEach((e,r)=>{t.set(r,null==e?void 0:e.toJSON())}),Promise.resolve(t)}async mosaicAndTransform(e){var t;const r=e.srcPixelBlocks.map(e=>e?new a["a"](e):null),o=Object(c["h"])(r,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo,clipOffset:e.clipOffset,clipSize:e.clipSize});let i,n=o;return e.coefs&&(n=Object(c["a"])(o,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation)),e.projectDirections&&e.gcsGrid&&(i=Object(c["e"])(e.destDimension,e.gcsGrid),n=Object(s["r"])(Object(f["a"])(n,e.isUV?"vector-uv":"vector-magdir",i))),{pixelBlock:null==(t=n)?void 0:t.toJSON(),localNorthDirections:i}}async createFlowMesh(e,t){const r={data:new Float32Array(e.flowData.buffer),mask:new Uint8Array(e.flowData.maskBuffer),width:e.flowData.width,height:e.flowData.height},{vertexData:s,indexData:o}=await Object(u["a"])(e.meshType,e.simulationSettings,r,t.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:o.buffer},transferList:[s.buffer,o.buffer]}}async getProjectionOffsetGrid(e){const t=d["a"].fromJSON(e.projectedExtent),r=d["a"].fromJSON(e.srcBufferExtent);let s=null;e.datumTransformationSteps&&(s=new o["a"]({steps:e.datumTransformationSteps})),(e.includeGCSGrid||Object(n["k"])(t.spatialReference,r.spatialReference,s))&&await Object(n["g"])();const a=e.rasterTransform?Object(m["b"])(e.rasterTransform):null;return Object(n["c"])({...e,projectedExtent:t,srcBufferExtent:r,datumTransformation:s,rasterTransform:a})}}}}]);
//# sourceMappingURL=chunk-2d0aec69.549617da.js.map