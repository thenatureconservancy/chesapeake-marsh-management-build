{"version":3,"sources":["webpack:///./node_modules/@arcgis/core/layers/support/RasterWorker.js"],"names":["O","convertVectorFieldData","e","t","s","fromJSON","pixelBlock","o","u","type","Promise","resolve","r","toJSON","data","options","symbolize","extent","x","this","symbolizer","h","symbolizerJSON","histograms","rendererJSON","stretch","simpleStretch","srcPixelBlock","stretchParams","estimateStatisticsHistograms","p","split","i","tileSize","maximumPyramidLevel","forEach","set","srcPixelBlocks","map","a","srcMosaicSize","blockWidths","alignmentInfo","clipOffset","clipSize","l","coefs","n","destDimension","sampleSpacing","interpolation","projectDirections","gcsGrid","m","d","isUV","localNorthDirections","Float32Array","flowData","buffer","mask","Uint8Array","maskBuffer","width","height","vertexData","indexData","y","meshType","simulationSettings","signal","result","vertexBuffer","indexBuffer","transferList","projectedExtent","srcBufferExtent","datumTransformationSteps","steps","includeGCSGrid","spatialReference","c","rasterTransform","S","f","datumTransformation"],"mappings":"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","file":"js/chunk-2d0aec69.549617da.js","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.24/esri/copyright.txt for details.\n*/\nimport\"../../geometry.js\";import{isSome as r,unwrap as e}from\"../../core/maybe.js\";import t from\"../../geometry/support/GeographicTransformation.js\";import s from\"./PixelBlock.js\";import{decode as o}from\"./rasterFormats/RasterCodec.js\";import{split as i,mosaic as a,approximateTransform as n,getLocalArithmeticNorthRotations as m}from\"./rasterFunctions/pixelUtils.js\";import{requirePE as l,load as c,getProjectionOffsetGrid as f}from\"./rasterFunctions/rasterProjectionHelper.js\";import{estimateStatisticsHistograms as p}from\"./rasterFunctions/stretchUtils.js\";import{convertVectorFieldData as u,convertToLocalDirections as d}from\"./rasterFunctions/vectorFieldUtils.js\";import{readTransform as S}from\"./rasterTransforms/utils.js\";import h from\"../../renderers/support/RasterSymbolizer.js\";import{createFlowMesh as y}from\"../../views/2d/engine/flow/dataUtils.js\";import x from\"../../geometry/Extent.js\";class O{convertVectorFieldData(e){const t=s.fromJSON(e.pixelBlock),o=u(t,e.type);return Promise.resolve(r(o)&&o.toJSON())}async decode(r){const e=await o(r.data,r.options);return e&&e.toJSON()}symbolize(e){e.pixelBlock=s.fromJSON(e.pixelBlock),e.extent=e.extent?x.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(r(t)&&t.toJSON())}async updateSymbolizer(r){this.symbolizer=h.fromJSON(r.symbolizerJSON),r.histograms&&\"rasterStretch\"===this.symbolizer?.rendererJSON.type&&(this.symbolizer.rendererJSON.histograms=r.histograms)}stretch(e){const t=this.symbolizer.simpleStretch(s.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(r(t)&&t.toJSON())}estimateStatisticsHistograms(r){const e=p(s.fromJSON(r.srcPixelBlock));return Promise.resolve(e)}split(r){const e=i(s.fromJSON(r.srcPixelBlock),r.tileSize,r.maximumPyramidLevel);return e&&e.forEach(((r,t)=>{e.set(t,r?.toJSON())})),Promise.resolve(e)}async mosaicAndTransform(r){const t=r.srcPixelBlocks.map((r=>r?new s(r):null)),o=a(t,r.srcMosaicSize,{blockWidths:r.blockWidths,alignmentInfo:r.alignmentInfo,clipOffset:r.clipOffset,clipSize:r.clipSize});let i,l=o;return r.coefs&&(l=n(o,r.destDimension,r.coefs,r.sampleSpacing,r.interpolation)),r.projectDirections&&r.gcsGrid&&(i=m(r.destDimension,r.gcsGrid),l=e(d(l,r.isUV?\"vector-uv\":\"vector-magdir\",i))),{pixelBlock:l?.toJSON(),localNorthDirections:i}}async createFlowMesh(r,e){const t={data:new Float32Array(r.flowData.buffer),mask:new Uint8Array(r.flowData.maskBuffer),width:r.flowData.width,height:r.flowData.height},{vertexData:s,indexData:o}=await y(r.meshType,r.simulationSettings,t,e.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:o.buffer},transferList:[s.buffer,o.buffer]}}async getProjectionOffsetGrid(r){const e=x.fromJSON(r.projectedExtent),s=x.fromJSON(r.srcBufferExtent);let o=null;r.datumTransformationSteps&&(o=new t({steps:r.datumTransformationSteps})),(r.includeGCSGrid||l(e.spatialReference,s.spatialReference,o))&&await c();const i=r.rasterTransform?S(r.rasterTransform):null;return f({...r,projectedExtent:e,srcBufferExtent:s,datumTransformation:o,rasterTransform:i})}}export{O as default};\n"],"sourceRoot":""}